package cpu

func (c *CPU) initInstructions() {
	c.instrs[0x00] = instruction{name: "BRK", mode: addrModeIMP, cycles: 7, fn: c.brk}
	c.instrs[0x01] = instruction{name: "ORA", mode: addrModeINDX, cycles: 6, fn: c.ora}
	c.instrs[0x05] = instruction{name: "ORA", mode: addrModeZP, cycles: 3, fn: c.ora}
	c.instrs[0x06] = instruction{name: "ASL", mode: addrModeZP, cycles: 5, fn: c.asl}
	c.instrs[0x08] = instruction{name: "PHP", mode: addrModeIMP, cycles: 3, fn: c.php}
	c.instrs[0x09] = instruction{name: "ORA", mode: addrModeIMM, cycles: 2, fn: c.ora}
	c.instrs[0x0A] = instruction{name: "ASL", mode: addrModeACC, cycles: 2, fn: c.asl}
	c.instrs[0x0D] = instruction{name: "ORA", mode: addrModeABS, cycles: 4, fn: c.ora}
	c.instrs[0x0E] = instruction{name: "ASL", mode: addrModeABS, cycles: 6, fn: c.asl}
	c.instrs[0x10] = instruction{name: "BPL", mode: addrModeREL, cycles: 2, fn: c.bpl}
	c.instrs[0x11] = instruction{name: "ORA", mode: addrModeINDY, cycles: 5, fn: c.ora}
	c.instrs[0x15] = instruction{name: "ORA", mode: addrModeZPX, cycles: 4, fn: c.ora}
	c.instrs[0x16] = instruction{name: "ASL", mode: addrModeZPX, cycles: 6, fn: c.asl}
	c.instrs[0x18] = instruction{name: "CLC", mode: addrModeIMP, cycles: 2, fn: c.clc}
	c.instrs[0x19] = instruction{name: "ORA", mode: addrModeABSY, cycles: 4, fn: c.ora}
	c.instrs[0x1D] = instruction{name: "ORA", mode: addrModeABSX, cycles: 4, fn: c.ora}
	c.instrs[0x1E] = instruction{name: "ASL", mode: addrModeABSX, cycles: 7, fn: c.asl}
	c.instrs[0x20] = instruction{name: "JSR", mode: addrModeABS, cycles: 6, fn: c.jsr}
	c.instrs[0x21] = instruction{name: "AND", mode: addrModeINDX, cycles: 6, fn: c.and}
	c.instrs[0x24] = instruction{name: "BIT", mode: addrModeZP, cycles: 3, fn: c.bit}
	c.instrs[0x25] = instruction{name: "AND", mode: addrModeZP, cycles: 3, fn: c.and}
	c.instrs[0x26] = instruction{name: "ROL", mode: addrModeZP, cycles: 5, fn: c.rol}
	c.instrs[0x28] = instruction{name: "PLP", mode: addrModeIMP, cycles: 4, fn: c.plp}
	c.instrs[0x29] = instruction{name: "AND", mode: addrModeIMM, cycles: 2, fn: c.and}
	c.instrs[0x2A] = instruction{name: "ROL", mode: addrModeACC, cycles: 2, fn: c.rol}
	c.instrs[0x2C] = instruction{name: "BIT", mode: addrModeABS, cycles: 4, fn: c.bit}
	c.instrs[0x2D] = instruction{name: "AND", mode: addrModeABS, cycles: 4, fn: c.and}
	c.instrs[0x2E] = instruction{name: "ROL", mode: addrModeABS, cycles: 6, fn: c.rol}
	c.instrs[0x30] = instruction{name: "BMI", mode: addrModeREL, cycles: 2, fn: c.bmi}
	c.instrs[0x31] = instruction{name: "AND", mode: addrModeINDY, cycles: 5, fn: c.and}
	c.instrs[0x35] = instruction{name: "AND", mode: addrModeZPX, cycles: 4, fn: c.and}
	c.instrs[0x36] = instruction{name: "ROL", mode: addrModeZPX, cycles: 6, fn: c.rol}
	c.instrs[0x38] = instruction{name: "SEC", mode: addrModeIMP, cycles: 2, fn: c.sec}
	c.instrs[0x39] = instruction{name: "AND", mode: addrModeABSY, cycles: 4, fn: c.and}
	c.instrs[0x3D] = instruction{name: "AND", mode: addrModeABSX, cycles: 4, fn: c.and}
	c.instrs[0x3E] = instruction{name: "ROL", mode: addrModeABSX, cycles: 7, fn: c.rol}
	c.instrs[0x40] = instruction{name: "RTI", mode: addrModeIMP, cycles: 6, fn: c.rti}
	c.instrs[0x41] = instruction{name: "EOR", mode: addrModeINDX, cycles: 6, fn: c.eor}
	c.instrs[0x45] = instruction{name: "EOR", mode: addrModeZP, cycles: 3, fn: c.eor}
	c.instrs[0x46] = instruction{name: "LSR", mode: addrModeZP, cycles: 5, fn: c.lsr}
	c.instrs[0x48] = instruction{name: "PHA", mode: addrModeIMP, cycles: 3, fn: c.pha}
	c.instrs[0x49] = instruction{name: "EOR", mode: addrModeIMM, cycles: 2, fn: c.eor}
	c.instrs[0x4A] = instruction{name: "LSR", mode: addrModeACC, cycles: 2, fn: c.lsr}
	c.instrs[0x4C] = instruction{name: "JMP", mode: addrModeABS, cycles: 3, fn: c.jmp}
	c.instrs[0x4D] = instruction{name: "EOR", mode: addrModeABS, cycles: 4, fn: c.eor}
	c.instrs[0x4E] = instruction{name: "LSR", mode: addrModeABS, cycles: 6, fn: c.lsr}
	c.instrs[0x50] = instruction{name: "BVC", mode: addrModeREL, cycles: 2, fn: c.bvc}
	c.instrs[0x51] = instruction{name: "EOR", mode: addrModeINDY, cycles: 5, fn: c.eor}
	c.instrs[0x55] = instruction{name: "EOR", mode: addrModeZPX, cycles: 4, fn: c.eor}
	c.instrs[0x56] = instruction{name: "LSR", mode: addrModeZPX, cycles: 6, fn: c.lsr}
	c.instrs[0x58] = instruction{name: "CLI", mode: addrModeIMP, cycles: 2, fn: c.cli}
	c.instrs[0x59] = instruction{name: "EOR", mode: addrModeABSY, cycles: 4, fn: c.eor}
	c.instrs[0x5D] = instruction{name: "EOR", mode: addrModeABSX, cycles: 4, fn: c.eor}
	c.instrs[0x5E] = instruction{name: "LSR", mode: addrModeABSX, cycles: 7, fn: c.lsr}
	c.instrs[0x60] = instruction{name: "RTS", mode: addrModeIMP, cycles: 6, fn: c.rts}
	c.instrs[0x61] = instruction{name: "ADC", mode: addrModeINDX, cycles: 6, fn: c.adc}
	c.instrs[0x65] = instruction{name: "ADC", mode: addrModeZP, cycles: 3, fn: c.adc}
	c.instrs[0x66] = instruction{name: "ROR", mode: addrModeZP, cycles: 5, fn: c.ror}
	c.instrs[0x68] = instruction{name: "PLA", mode: addrModeIMP, cycles: 4, fn: c.pla}
	c.instrs[0x69] = instruction{name: "ADC", mode: addrModeIMM, cycles: 2, fn: c.adc}
	c.instrs[0x6A] = instruction{name: "ROR", mode: addrModeACC, cycles: 2, fn: c.ror}
	c.instrs[0x6C] = instruction{name: "JMP", mode: addrModeIND, cycles: 5, fn: c.jmp}
	c.instrs[0x6D] = instruction{name: "ADC", mode: addrModeABS, cycles: 4, fn: c.adc}
	c.instrs[0x6E] = instruction{name: "ROR", mode: addrModeABS, cycles: 6, fn: c.ror}
	c.instrs[0x70] = instruction{name: "BVS", mode: addrModeREL, cycles: 2, fn: c.bvs}
	c.instrs[0x71] = instruction{name: "ADC", mode: addrModeINDY, cycles: 5, fn: c.adc}
	c.instrs[0x75] = instruction{name: "ADC", mode: addrModeZPX, cycles: 4, fn: c.adc}
	c.instrs[0x76] = instruction{name: "ROR", mode: addrModeZPX, cycles: 6, fn: c.ror}
	c.instrs[0x78] = instruction{name: "SEI", mode: addrModeIMP, cycles: 2, fn: c.sei}
	c.instrs[0x79] = instruction{name: "ADC", mode: addrModeABSY, cycles: 4, fn: c.adc}
	c.instrs[0x7D] = instruction{name: "ADC", mode: addrModeABSX, cycles: 4, fn: c.adc}
	c.instrs[0x7E] = instruction{name: "ROR", mode: addrModeABSX, cycles: 7, fn: c.ror}
	c.instrs[0x81] = instruction{name: "STA", mode: addrModeINDX, cycles: 6, fn: c.sta}
	c.instrs[0x84] = instruction{name: "STY", mode: addrModeZP, cycles: 3, fn: c.sty}
	c.instrs[0x85] = instruction{name: "STA", mode: addrModeZP, cycles: 3, fn: c.sta}
	c.instrs[0x86] = instruction{name: "STX", mode: addrModeZP, cycles: 3, fn: c.stx}
	c.instrs[0x88] = instruction{name: "DEY", mode: addrModeIMP, cycles: 2, fn: c.dey}
	c.instrs[0x8A] = instruction{name: "TXA", mode: addrModeIMP, cycles: 2, fn: c.txa}
	c.instrs[0x8C] = instruction{name: "STY", mode: addrModeABS, cycles: 4, fn: c.sty}
	c.instrs[0x8D] = instruction{name: "STA", mode: addrModeABS, cycles: 4, fn: c.sta}
	c.instrs[0x8E] = instruction{name: "STX", mode: addrModeABS, cycles: 4, fn: c.stx}
	c.instrs[0x90] = instruction{name: "BCC", mode: addrModeREL, cycles: 2, fn: c.bcc}
	c.instrs[0x91] = instruction{name: "STA", mode: addrModeINDY, cycles: 6, fn: c.sta}
	c.instrs[0x94] = instruction{name: "STY", mode: addrModeZPX, cycles: 4, fn: c.sty}
	c.instrs[0x95] = instruction{name: "STA", mode: addrModeZPX, cycles: 4, fn: c.sta}
	c.instrs[0x96] = instruction{name: "STX", mode: addrModeZPY, cycles: 4, fn: c.stx}
	c.instrs[0x98] = instruction{name: "TYA", mode: addrModeIMP, cycles: 2, fn: c.tya}
	c.instrs[0x99] = instruction{name: "STA", mode: addrModeABSY, cycles: 5, fn: c.sta}
	c.instrs[0x9A] = instruction{name: "TXS", mode: addrModeIMP, cycles: 2, fn: c.txs}
	c.instrs[0x9D] = instruction{name: "STA", mode: addrModeABSX, cycles: 5, fn: c.sta}
	c.instrs[0xA0] = instruction{name: "LDY", mode: addrModeIMM, cycles: 2, fn: c.ldy}
	c.instrs[0xA1] = instruction{name: "LDA", mode: addrModeINDX, cycles: 6, fn: c.lda}
	c.instrs[0xA2] = instruction{name: "LDX", mode: addrModeIMM, cycles: 2, fn: c.ldx}
	c.instrs[0xA4] = instruction{name: "LDY", mode: addrModeZP, cycles: 3, fn: c.ldy}
	c.instrs[0xA5] = instruction{name: "LDA", mode: addrModeZP, cycles: 3, fn: c.lda}
	c.instrs[0xA6] = instruction{name: "LDX", mode: addrModeZP, cycles: 3, fn: c.ldx}
	c.instrs[0xA8] = instruction{name: "TAY", mode: addrModeIMP, cycles: 2, fn: c.tay}
	c.instrs[0xA9] = instruction{name: "LDA", mode: addrModeIMM, cycles: 2, fn: c.lda}
	c.instrs[0xAA] = instruction{name: "TAX", mode: addrModeIMP, cycles: 2, fn: c.tax}
	c.instrs[0xAC] = instruction{name: "LDY", mode: addrModeABS, cycles: 4, fn: c.ldy}
	c.instrs[0xAD] = instruction{name: "LDA", mode: addrModeABS, cycles: 4, fn: c.lda}
	c.instrs[0xAE] = instruction{name: "LDX", mode: addrModeABS, cycles: 4, fn: c.ldx}
	c.instrs[0xB0] = instruction{name: "BCS", mode: addrModeREL, cycles: 2, fn: c.bcs}
	c.instrs[0xB1] = instruction{name: "LDA", mode: addrModeINDY, cycles: 5, fn: c.lda}
	c.instrs[0xB4] = instruction{name: "LDY", mode: addrModeZPX, cycles: 4, fn: c.ldy}
	c.instrs[0xB5] = instruction{name: "LDA", mode: addrModeZPX, cycles: 4, fn: c.lda}
	c.instrs[0xB6] = instruction{name: "LDX", mode: addrModeZPY, cycles: 4, fn: c.ldx}
	c.instrs[0xB8] = instruction{name: "CLV", mode: addrModeIMP, cycles: 2, fn: c.clv}
	c.instrs[0xB9] = instruction{name: "LDA", mode: addrModeABSY, cycles: 4, fn: c.lda}
	c.instrs[0xBA] = instruction{name: "TSX", mode: addrModeIMP, cycles: 2, fn: c.tsx}
	c.instrs[0xBC] = instruction{name: "LDY", mode: addrModeABSX, cycles: 4, fn: c.ldy}
	c.instrs[0xBD] = instruction{name: "LDA", mode: addrModeABSX, cycles: 4, fn: c.lda}
	c.instrs[0xBE] = instruction{name: "LDX", mode: addrModeABSY, cycles: 4, fn: c.ldx}
	c.instrs[0xC0] = instruction{name: "CPY", mode: addrModeIMM, cycles: 2, fn: c.cpy}
	c.instrs[0xC1] = instruction{name: "CMP", mode: addrModeINDX, cycles: 6, fn: c.cmp}
	c.instrs[0xC4] = instruction{name: "CPY", mode: addrModeZP, cycles: 3, fn: c.cpy}
	c.instrs[0xC5] = instruction{name: "CMP", mode: addrModeZP, cycles: 3, fn: c.cmp}
	c.instrs[0xC6] = instruction{name: "DEC", mode: addrModeZP, cycles: 5, fn: c.dec}
	c.instrs[0xC8] = instruction{name: "INY", mode: addrModeIMP, cycles: 2, fn: c.iny}
	c.instrs[0xC9] = instruction{name: "CMP", mode: addrModeIMM, cycles: 2, fn: c.cmp}
	c.instrs[0xCA] = instruction{name: "DEX", mode: addrModeIMP, cycles: 2, fn: c.dex}
	c.instrs[0xCC] = instruction{name: "CPY", mode: addrModeABS, cycles: 4, fn: c.cpy}
	c.instrs[0xCD] = instruction{name: "CMP", mode: addrModeABS, cycles: 4, fn: c.cmp}
	c.instrs[0xCE] = instruction{name: "DEC", mode: addrModeABS, cycles: 6, fn: c.dec}
	c.instrs[0xD0] = instruction{name: "BNE", mode: addrModeREL, cycles: 2, fn: c.bne}
	c.instrs[0xD1] = instruction{name: "CMP", mode: addrModeINDY, cycles: 5, fn: c.cmp}
	c.instrs[0xD5] = instruction{name: "CMP", mode: addrModeZPX, cycles: 4, fn: c.cmp}
	c.instrs[0xD6] = instruction{name: "DEC", mode: addrModeZPX, cycles: 6, fn: c.dec}
	c.instrs[0xD8] = instruction{name: "CLD", mode: addrModeIMP, cycles: 2, fn: c.cld}
	c.instrs[0xD9] = instruction{name: "CMP", mode: addrModeABSY, cycles: 4, fn: c.cmp}
	c.instrs[0xDD] = instruction{name: "CMP", mode: addrModeABSX, cycles: 4, fn: c.cmp}
	c.instrs[0xDE] = instruction{name: "DEC", mode: addrModeABSX, cycles: 7, fn: c.dec}
	c.instrs[0xE0] = instruction{name: "CPX", mode: addrModeIMM, cycles: 2, fn: c.cpx}
	c.instrs[0xE1] = instruction{name: "SBC", mode: addrModeINDX, cycles: 6, fn: c.sbc}
	c.instrs[0xE4] = instruction{name: "CPX", mode: addrModeZP, cycles: 3, fn: c.cpx}
	c.instrs[0xE5] = instruction{name: "SBC", mode: addrModeZP, cycles: 3, fn: c.sbc}
	c.instrs[0xE6] = instruction{name: "INC", mode: addrModeZP, cycles: 5, fn: c.inc}
	c.instrs[0xE8] = instruction{name: "INX", mode: addrModeIMP, cycles: 2, fn: c.inx}
	c.instrs[0xE9] = instruction{name: "SBC", mode: addrModeIMM, cycles: 2, fn: c.sbc}
	c.instrs[0xEA] = instruction{name: "NOP", mode: addrModeIMP, cycles: 2, fn: c.nop}
	c.instrs[0xEC] = instruction{name: "CPX", mode: addrModeABS, cycles: 4, fn: c.cpx}
	c.instrs[0xED] = instruction{name: "SBC", mode: addrModeABS, cycles: 4, fn: c.sbc}
	c.instrs[0xEE] = instruction{name: "INC", mode: addrModeABS, cycles: 6, fn: c.inc}
	c.instrs[0xF0] = instruction{name: "BEQ", mode: addrModeREL, cycles: 2, fn: c.beq}
	c.instrs[0xF1] = instruction{name: "SBC", mode: addrModeINDY, cycles: 5, fn: c.sbc}
	c.instrs[0xF5] = instruction{name: "SBC", mode: addrModeZPX, cycles: 4, fn: c.sbc}
	c.instrs[0xF6] = instruction{name: "INC", mode: addrModeZPX, cycles: 6, fn: c.inc}
	c.instrs[0xF8] = instruction{name: "SED", mode: addrModeIMP, cycles: 2, fn: c.sed}
	c.instrs[0xF9] = instruction{name: "SBC", mode: addrModeABSY, cycles: 4, fn: c.sbc}
	c.instrs[0xFD] = instruction{name: "SBC", mode: addrModeABSX, cycles: 4, fn: c.sbc}
	c.instrs[0xFE] = instruction{name: "INC", mode: addrModeABSX, cycles: 7, fn: c.inc}
}
